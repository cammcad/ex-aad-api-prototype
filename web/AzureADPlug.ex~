defmodule Plug.AzureADPlug do
	@behaviour Plug

	def init(options) do
	  # initialize options
		options
	end

	def call(conn, _opts), do: validateConn(conn)

	def validateConn(conn) do
    conn
		|> hasAuthHeader?
		|> bearerToken?
		|> hasAppropriatePermissions		
	end

	defp access_denied(conn), do:	Plug.Conn.send_resp(conn,401,"Ooops! You don't have permission to be here.")
	
	#parse out headers to check for authorization header
	defp hasAuthHeader?(conn) do
		headers = Plug.Conn.req_headers(conn)
		headers = Enum.into(headers,HashDict.new)
		case Dict.has_key?(headers,"authorization") do
			false -> access_denied(conn)																									
			true -> {conn,headers}
		end
	end

	#check for bearer token
	defp bearerToken?({conn,headers}) do
		authHeader = Dict.get(headers,"authorization")
		case String.contains?(authHeader,"Bearer") do
			false -> access_denied(conn)
			true ->
				token = String.split(authHeader, " ") |> tl
				[jwt,claims,_] = String.split(token, ".")
				{conn,Base.url_decode64(jwt),Base.url_decode64(claims)}
		end
	end

	#check for appropriate permissions to allow the request though via (claims validation).
	#To take this step a bit further, we could call the azure active directory graph api
	#with the claims information to get more permission details about the user issuing this request.
	#For now... to illustrate the point we're just going to check to make sure that the first part of
	#the token is jwt compliant and that the request is only allowed for active directory user
	# cammcad@cameronfrederickmsn.onmicrosoft.com
	defp hasAppropriatePermissions({conn,jwt,claimsInfo}) do
		case Jsx.is_json? jwt do
		  false -> access_denied(conn)
			true ->
				jwtMap = Jsx.decode jwt
				case isValidJWT? jwtMap do
					true ->
						claimsMap = Jsx.decode claimsInfo
						case isValidClaim(claimsMap) do
							true -> conn
							_ -> access_denied(conn)
						end
				  _ -> access_denied(conn)
				end
		end
	end

	#ensure that we have a valid jwt
	defp isValidJWT?(jwtMap) do
		hasTyp = hasProp?(jwtMap,"typ")
		case hasTyp and jwtMap["typ"] == "JWT" do
			true ->
				hasAlg = hasProp?(jwtMap,"alg")
				case hasAlg and jwtMap["alg"] == "RS256" do
					true -> hasProp?(jwtMap,"x5t")
					_ -> false
				end
			_ -> false
		end
	end

	#ensure that we have a valid claim, very simplistic implementation
	#that just ensures that the active directory user is cammcad@cameronfrederickmsn.onmicrosoft.com
	#this is where we could call back to Azure AD for permissions that have been granted to the user
	#who issues this request.
	defp isValidClaim(claimMap) do
		hasUpn = hasProp?(claimMap,"upn")
		(hasUpn and claimMap["upn"] == "cammcad@cameronfrederickmsn.onmicrosoft.com")
	end
	#helper 
	defp hasProp?(map,key), do: Dict.has_key?(map,key)
end
